{"version":3,"sources":["ui/ConverterPage.tsx","ui/Content.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["ConverterPageRoot","styled","div","TextFieldContainer","IconContainer","Label","ConverterPage","useState","currentScript","setCurrentScript","latinText","setLatinText","cyrillicText","setCyrillicText","arebicaText","setArebicaText","classNames","setClassNames","useEffect","convertLatinToArebica","convertCyrillicToArebica","noValidate","autoComplete","Select","labelId","id","value","onOpen","onClose","onChange","e","target","MenuItem","className","TextField","multiline","variant","rows","inputProps","style","fontSize","lineHeight","background","fontFamily","size","color","dir","readOnly","Tooltip","title","text","IconButton","width","float","src","height","alt","ContentRoot","Content","App","console","log","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.2e0ed419.chunk.js","sourcesContent":["import React, { useEffect, useState } from \"react\"\r\nimport styled from \"styled-components\"\r\nimport { IconButton, MenuItem, Select, TextField, Tooltip } from \"@material-ui/core\"\r\nimport { CopyToClipboard } from 'react-copy-to-clipboard';\r\nimport { convertLatinToArebica, convertCyrillicToArebica } from \"arebica-js\";\r\n\r\nconst ConverterPageRoot = styled.div`\r\n    display: flex;\r\n    z-index: 1;\r\n    flex-direction: column;\r\n    height: auto;\r\n    width: 80%;\r\n    margin-top: 0;\r\n    padding-bottom: 0;\r\n    max-width: 1000px;\r\n    margin-left: auto;\r\n    background: transparent;\r\n    margin-right: auto;\r\n`\r\n\r\nconst TextFieldContainer = styled.div`\r\n    display: flex;\r\n    flex-direction: column;\r\n    height: auto;\r\n    margin-top: 20px;\r\n    margin-bottom: 20px;\r\n    min-height: 200px;\r\n    margin-left: auto;\r\n    margin-right: auto;\r\n\r\n    .MuiOutlinedInput-root.Mui-focused .MuiOutlinedInput-notchedOutline {\r\n        border-color: transparent !important;\r\n    }\r\n`\r\n\r\nconst IconContainer = styled.div`\r\n    display: block;\r\n\r\n\r\n    &:active {\r\n        transform: translateY(2px);\r\n      }\r\n`\r\n\r\nconst Label = styled.div`\r\n    font-size: 18px;\r\n    font-weight: bold;\r\n    height: 32px;\r\n    width: 80px;\r\n    font-family: 'Roboto';\r\n    color: #fff;\r\n`\r\n\r\nconst ConverterPage: React.FunctionComponent = () => {\r\n    const [currentScript, setCurrentScript] = useState<\"lat\" | \"cyr\">(\"lat\")\r\n\r\n    const [latinText, setLatinText] = useState<string>(\"\")\r\n    const [cyrillicText, setCyrillicText] = useState<string>(\"\")\r\n    const [arebicaText, setArebicaText] = useState<string>(\"\")\r\n\r\n    const [classNames, setClassNames] = useState<string>(\"\")\r\n\r\n    useEffect(() => {\r\n        setLatinText(\"\")\r\n        setCyrillicText(\"\")\r\n        setArebicaText(\"\")\r\n    }, [currentScript])\r\n\r\n    useEffect(() => {\r\n        setArebicaText(convertLatinToArebica(latinText))\r\n    }, [latinText])\r\n\r\n    useEffect(() => {\r\n        setArebicaText(convertCyrillicToArebica(cyrillicText))\r\n    }, [cyrillicText])\r\n\r\n    return <ConverterPageRoot>\r\n        <form noValidate autoComplete=\"off\">\r\n            <TextFieldContainer>\r\n                <Select\r\n                    labelId=\"demo-simple-select-helper-label\"\r\n                    id=\"demo-simple-select-helper\"\r\n                    value={currentScript}\r\n                    onOpen={\r\n                        () => {\r\n                            setClassNames(\"menu-label\")\r\n                        }\r\n                    }\r\n                    onClose={\r\n                        () => {\r\n                            setClassNames(\"\")\r\n                        }\r\n                    }\r\n                    onChange={(e: any) => setCurrentScript(e.target.value)}>\r\n                    <MenuItem value={\"lat\"}>\r\n                        <Label className={classNames}>\r\n                            Latinica\r\n                        </Label>\r\n                    </MenuItem>\r\n\r\n                    <MenuItem value={\"cyr\"}>\r\n                        <Label className={classNames}>\r\n                            Ćirilica\r\n                        </Label>\r\n                    </MenuItem>\r\n                </Select>\r\n                {\r\n                    currentScript === \"lat\" &&\r\n                    <TextField\r\n                        multiline\r\n                        variant=\"outlined\"\r\n                        rows={4}\r\n                        value={latinText}\r\n                        onChange={(e: any) => setLatinText(e.target.value)}\r\n                        inputProps={{ style: { fontSize: 17, lineHeight: 1.5, background: \"#fff\", fontFamily: \"Roboto\" } }}\r\n                        size=\"medium\"\r\n                    />\r\n                }\r\n                {\r\n                    currentScript === \"cyr\" &&\r\n                    <TextField\r\n                        multiline\r\n\r\n                        color=\"primary\"\r\n                        variant=\"outlined\"\r\n                        rows={4}\r\n                        value={cyrillicText}\r\n                        onChange={(e: any) => setCyrillicText(e.target.value)}\r\n                        inputProps={{ style: { fontSize: 17, lineHeight: 1.5, background: \"#fff\", fontFamily: \"Roboto\" } }}\r\n                        size=\"medium\"\r\n                    />\r\n                }\r\n            </TextFieldContainer>\r\n\r\n            <TextFieldContainer dir=\"rtl\">\r\n                <Label>\r\n                    Arebica\r\n                </Label>\r\n                <TextField\r\n                    multiline\r\n                    color=\"primary\"\r\n                    className=\"arebica-field\"\r\n                    variant=\"outlined\"\r\n                    rows={4}\r\n                    value={arebicaText}\r\n                    inputProps={{ readOnly: true, style: { fontSize: 28, background: \"#fff\", lineHeight: 1.5, fontFamily: \"ScheherezadeNew-Regular\" } }}\r\n                    size=\"medium\"\r\n                />\r\n\r\n                <Tooltip title=\"Kopiraj tekst\">\r\n                    <CopyToClipboard text={arebicaText}>\r\n                        <IconButton style={{ width: \"40px\", fontSize: \"14px\", float: \"right\" }} >\r\n                            <IconContainer>\r\n                                <img src=\"./assets/copy.svg\" width=\"40\" height=\"40\" alt=\"Kopiraj tekst\" />\r\n                            </IconContainer>\r\n                        </IconButton>\r\n                    </CopyToClipboard>\r\n                </Tooltip>\r\n            </TextFieldContainer>\r\n\r\n        </form>\r\n    </ConverterPageRoot>\r\n}\r\n\r\nexport default ConverterPage","import React from \"react\"\r\nimport ConverterPage from \"./ConverterPage\"\r\nimport styled from \"styled-components\"\r\n\r\nconst ContentRoot = styled.div`\r\n    display: flex;\r\n    position: relative;\r\n    overflow-y: auto;\r\n`\r\n\r\nconst Content: React.FunctionComponent = () => {\r\n    return <ContentRoot>\r\n        <ConverterPage />\r\n    </ContentRoot>\r\n}\r\n\r\nexport default Content","import './App.css';\r\nimport Content from './ui/Content';\r\n\r\nfunction App() {\r\n  console.log(\"%cŠTA JE BOLA ŠTA GLEDAŠ\", \"color: #fff; background-color: green;\")\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <Content />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import { ReportHandler } from 'web-vitals';\r\n\r\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}